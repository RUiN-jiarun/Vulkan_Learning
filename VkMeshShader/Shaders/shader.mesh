#version 450
#extension GL_NV_mesh_shader: require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

layout(binding = 0) uniform UniformBufferObject 
{
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;


struct Vertex
{
	vec4 Position;
	vec4 Color;
};

layout(binding = 1) readonly buffer Vertices
{
	Vertex vertices[];
} g_Vertex;

struct Meshlet
{
	uint vertices[64];
	uint indices[126 * 3]; // up to 42 triangles
	uint indexCount;
	uint vertexCount;
};

layout(binding = 2) readonly buffer Meshlets
{
	Meshlet meshlets[];
} g_Meshlet;

layout(location = 0) out vec3 fragColor[];

void main()
{
	uint mi = gl_WorkGroupID.x;

	for (uint i = 0; i < uint(g_Meshlet.meshlets[mi].vertexCount); ++i)
	{
		uint vi = g_Meshlet.meshlets[mi].vertices[i];
		vec3 pos = vec3(g_Vertex.vertices[vi].Position.xy, 0.0);

		gl_MeshVerticesNV[i].gl_Position = ubo.proj * ubo.view * ubo.model * vec4(pos, 1.0);

		fragColor[i] = vec3(1.0);
	}

    gl_PrimitiveCountNV = uint(g_Meshlet.meshlets[mi].indexCount) / 3;

	for (uint i = 0; i < uint(g_Meshlet.meshlets[mi].indexCount); ++i)
	{
		gl_PrimitiveIndicesNV[i] = uint(g_Meshlet.meshlets[mi].indices[i]);
	}
}